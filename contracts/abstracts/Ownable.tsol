// SPDX-License-Identifier: AGPL-3.0-or-later
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma ever-solidity >= 0.62.0;

import "./Context.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "../libraries/BaseErrorCodes.tsol";

abstract contract Ownable is Context {
    address internal _owner;
    bool    private  _initialized;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    function _initOwnable(address owner) internal virtual {
        require(owner != address(this), BaseErrorCodes.SELF_OWNERSHIP);
        if(_initialized) return;

        if(owner == address(0)) {
            _transferOwnership(_msgSender());
        } else {
            _transferOwnership(owner);
        }

        _initialized = true;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual responsible returns (address) {
        return {value:0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false} _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), BaseErrorCodes.NOT_OWNER);
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), BaseErrorCodes.ZERO_ADDRESS);
        require(newOwner != address(this), BaseErrorCodes.SELF_OWNERSHIP);

        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    function _backupOwnable() internal view returns (TvmCell) {
        return abi.encode(_owner, _initialized);
    }

    function _restoreOwnable(TvmCell backup) internal {
        TvmSlice slice = backup.toSlice();
        (address o, bool initialized) = slice.decode(address, bool);

        _owner = o;
        _initialized = initialized;
    }
}
