// SPDX-License-Identifier: AGPL-3.0-or-later
pragma ever-solidity >= 0.66.0;

import "./BaseErrorCodes.tsol";

library ArrayHelper {
    // Delete value from the `array` at `index` position
    function del(uint[] array, uint index) internal {
        for (uint i = index; i + 1 < array.length; ++i){
            array[i] = array[i + 1];
        }
        array.pop();
    }

    function del(uint64[] array, uint64 index) internal {
        for (uint64 i = index; i + 1 < array.length; ++i){
            array[i] = array[i + 1];
        }
        array.pop();
    }

    function del(address[] array, uint index) internal {
        for (uint i = index; i + 1 < array.length; ++i){
            array[i] = array[i + 1];
        }
        array.pop();
    }

    function delVal(uint[] array, uint value) internal {
        for (uint i = 0; i + 1 < array.length; ++i) {
            if(array[i] == value) {
                for (uint j = i; j + 1 < array.length; ++j) {
                    array[j] = array[j + 1];
                }
                break;
            }
        }
        array.pop();
    }

    function quickSort(uint64[] arr, uint left, uint right) public returns(uint64[]) {
        if(left >= right) return arr;
        if(right >= arr.length) return arr;

        uint i = left;
        uint j = right;

        uint64 pivot = arr[left + (right - left) / 2];
        while (i <= j) {
            while (arr[i] < pivot && i < arr.length) i++;
            while (pivot < arr[j] && j > 1) j--;
            if (i <= j) {
                (arr[i], arr[j]) = (arr[j], arr[i]);
                i++;
                j--;
            }
        }

        if (left < j)
            arr = quickSort(arr, left, j);

        if (i < right)
            arr = quickSort(arr, i, right);

        return arr;
    }

    function median(uint64[] arr) internal returns (uint) {
        require(arr.length > 0, BaseErrorCodes.NON_EMPTY_VALUE_REQUIRED);

        uint64[] arrSorted = quickSort(arr, 0, arr.length - 1);

        if(arrSorted.length % 2 == 0) {
            uint64 a = arrSorted[arrSorted.length / 2 - 1];
            uint64 b = arrSorted[arrSorted.length / 2];
            return (a + b) / 2;
        } else {
            return arrSorted[arrSorted.length / 2];
        }
    }
}