// SPDX-License-Identifier: AGPL-3.0-or-later

pragma ever-solidity >= 0.66.0;

import "./BaseErrorCodes.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

library Utils {

    uint128 constant CONTRACT_MIN_BALANCE = 0.2 ever;

    /// Looks for a value corresponding to the selected key, if any
    /// @param  keys    Array of keys
    /// @param  values  Array of values
    /// @param  key     The key to look for
    /// @return Corresponding value, if the key is found, or empty string otherwise
    function vLookup(string[] keys, string[] values, string key) internal returns (string) {
        require(keys.length == values.length, BaseErrorCodes.PARAMETER_COUNT_MISMATCH);

        if (key == "") return "";

        for (uint i; i < keys.length; i++) {
            if (key == keys[i]) {
                return values[i];
            }
        }

        return "";
    }

    function mergeStringArray(string[] input, string delimiter) internal returns (string) {
        string result = "";
        for(uint i; i < input.length; i++) {

            if(i == 0) {
                result = input[0];
            } else {
                result += delimiter + input[i];
            }
        }

        return result;
    }

    function _reserve() internal virtual returns (uint128) {
        return math.max(address(this).balance - msg.value, CONTRACT_MIN_BALANCE);
    }

    struct UniversalMeta {
        uint64  callId;
        address returnGasTo;
    }

    function _getTimestamp() internal returns (uint64) {
        return now /*block.timestamp*/;
    }

    function requireWithCashback(bool condition, address returnGasTo, uint16 errorCode) internal {
        if(!condition) {
            returnGasTo.transfer({ value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false });
            revert(errorCode);
        }
    }
/*
    function sortU64ByMap(uint64[] arr) internal returns (uint64[]) {
        mapping(uint64 => uint1) tmp;
        for(uint64 item : arr) {
            tmp[item] = 0;
        }

        return tmp.keys();
    }

    function medianU64(uint64[] arr) internal returns (uint64) {
        require(arr.length > 0, BaseErrorCodes.NOT_ALLOWED);
        uint64[] arrSorted = sortU64ByMap(arr);
        if(arrSorted.length % 2 == 0) {
            uint64 a = arrSorted[arrSorted.length / 2 - 1];
            uint64 b = arrSorted[arrSorted.length / 2];
            return (a + b) / 2;
        } else {
            return arrSorted[arrSorted.length / 2];
        }
    }*/
}