// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

interface IGame {
    struct Coordinate {
        uint16 x;
        uint16 y;
    }

    enum PathType {
        RedBeam, BlueBeam
    }

    struct Path {
        Coordinate from;
        Coordinate to;
        PathType   type_;
    }

    enum RoundStatus {
        NotStarted, Ready, Active, Finished, Expired
    }

    /**
        Round information container
    */
    struct Round {
        //  Basic information
        uint64              id;
        RoundStatus         status;
        address             winner;

        //  General settings
        uint16              maxPlayers;
        bool                giveUpAllowed;

        //  Timings
        uint64              validUntil;
        uint64              moveDuration;
        optional(uint64)    autoStartTimestamp;

        //  Treasury
        uint128             entryStake;
        uint128             prizeFund;
        bool                prizeClaimed;
        uint128             rake;
        uint8               rakeToJackpotRate;
    }

    struct Board {
        uint16 columns;
        uint16 rows;
    }

    struct Move {
        uint64    expiresAt;
        mapping(address => Step[]) playerSteps;
    }

    struct Location {
        uint16      cell;
        Coordinate coordinate;
    }

    struct Step {
        Location from;
        Location to;
    }

    struct RoundTreasury {
        uint128 prize;
        uint128 entranceFee;
        mapping(address => uint128) playerJackpot;
    }

    struct BoardTreasury {
        uint128 rakes;
        uint128 jackpot;
        mapping(uint64 => RoundTreasury) roundTreasury;
    }

    //  Game flow events
    event RoundCreated(address board, uint64 roundId);
    event RoundFinished(address board, uint64 roundId, address winner);
    event DiceRolled(address player, uint16 dice);
    event PathFound(address player, Path path);

    //  Player events
    event RoundJoined(address board, uint64 roundId, address player);
    event PlayerMoved(address board, uint64 round, address player, Location from, Location to);
    event PlayerWon(address board, uint64 round, address player, uint128 amount);
    event PlayerRemovedFromRound(address board, uint64 roundId, address player);

    //  Board configuration events
    event BoardGenerated(Board board, Path[] redBeams, Path[] blueBeams);
    event EntryStakeUpdated(address board, uint128 oldValue, uint128 newValue);
    event RakeUpdated(address board, uint128 oldValue, uint128 newValue);
    event JackpotRateUpdated(address board, uint8 oldValue, uint8 newValue);
    event PrizeFundUpdated(address board, uint128 oldValue, uint128 newValue);
    event MaxRoundTimeMsUpdated(address board, uint64 oldValue, uint64 newValue);
    event MaxMoveTimeMsUpdated(address board, uint64 oldValue, uint64 newValue);
    event RoundAutostartMsUpdated(address board, optional(uint64) oldValue, optional(uint64) newValue);
    event MaxPlayersUpdated(address board, uint16 oldValue, uint16 newValue);
    event PlayerGiveUpAllowedUpdated(address board, bool oldValue, bool newValue);

    //  Financial events
    event PrizeClaimed(address board, uint64 roundId, address player, uint128 amount);
    event JackpotDrawn(address board, uint64 roundId, address player, uint128 amount);
    event JackpotClaimed(address board, uint64 roundId, address player, uint128 amount);

    function generateBoard(uint seed, uint16 maxRedBeams, uint16 maxBlueBeams) external;
    function getBoard() external view responsible returns (Board board, Path[] redBeams, Path[] blueBeams);
    function roll() external responsible returns (uint16 dice, Coordinate newPosition);
    function claim(uint64 roundId) external;

    function createRound() external responsible returns (Round round);
    function getRound(uint64 roundId) external view responsible returns (optional(Round) round);
    function getRounds(optional(RoundStatus) status) external view responsible returns (Round[] rounds);
    function getRoundLatestMove(uint64 roundId) external view responsible returns (optional(Move) move);
    function joinRound(uint64 roundId) external responsible returns (bool result);

    function setMaxPlayers(uint16 qty) external;
    function setMaxRoundTimeMs(uint64 ms) external;
    function setMaxMoveTimeMs(uint64 ms) external;
    function setPrizeFund(uint128 amount) external;
    function setEntryStake(uint128 amount) external;
    function setAutostartMs(optional(uint64) ms) external;
    function setPlayerGiveUpAllowed(bool allowed) external;
    function setRake(uint128 amount) external;
    function setJackpotRate(uint8 rate) external;
}