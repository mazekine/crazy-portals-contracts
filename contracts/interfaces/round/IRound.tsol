// SPDX-License-Identifier: AGPL-3.0-or-later
pragma ever-solidity >= 0.66.0;

import "../common/IGenericStructures.tsol";

interface IRound is IGenericStructures {
    //  Game flow events
    event RoundFinished(address board, uint64 roundId, address winner);
    event DiceRolled(address player, uint16 dice);
    event PathFound(address player, Path path);

    //  Player events
    event RoundJoined(address board, uint64 roundId, address player);
    event PlayerMoved(address board, uint64 round, address player, uint32 path);
    event PlayerWon(address board, uint64 round, address player, uint128 amount);
    event PlayerRemovedFromRound(address board, uint64 roundId, address player);

    //  Financial events
    event PrizeClaimed(address board, uint64 roundId, address player, uint128 amount);
    event JackpotDrawn(address board, uint64 roundId, address player, uint128 amount);
    event JackpotClaimed(address board, uint64 roundId, address player, uint128 amount);

    //function getRound(uint64 roundId) external view responsible returns (optional(Round) round);
    function getRoundLatestMove(uint64 roundId) external view responsible returns (optional(Move) move);
    function join(CallMetadata meta) external;   //  Only callable from board contract
    function updateRoundStatus() external;
    function getRoundStatus(CallMetadata _meta) external view responsible returns (uint64 roundId, RoundStatus status, CallMetadata meta);
    function decodePath(uint32 mask) external pure returns (Location from, Location to);

    function roll() external /*responsible returns (uint16 dice, Coordinate newPosition)*/;
    function claim(uint64 roundId) external;
}
