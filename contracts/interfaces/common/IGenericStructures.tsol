// SPDX-License-Identifier: AGPL-3.0-or-later
pragma ever-solidity >= 0.66.0;

interface IGenericStructures {
    enum RoundStatus {
        NotStarted, Ready, Active, Finished, Expired
    }

    /**
        Round information container
    */
    struct Round {
        //  Basic information
        uint64              id;
        RoundStatus         status;
        address             winner;
        address             board;

        //  General settings
        uint16              maxPlayers;
        bool                giveUpAllowed;

        //  Timings
        uint64              validUntil;
        uint64              roundDuration;
        uint64              moveDuration;
        optional(uint64)    autoStartTimestamp;

        //  Treasury
        uint128             entryStake;
        uint128             prizeFund;
        bool                prizeClaimed;
        uint128             rake;
        uint8               rakeToJackpotRate;
    }

    struct Coordinate {
        uint8 x;
        uint8 y;
    }

    enum PathType {
        RedBeam, BlueBeam
    }

    struct Path {
        Coordinate from;
        Coordinate to;
        PathType   type_;
    }

    struct Board {
        uint8 columns;
        uint8 rows;
    }

    struct Move {
        uint64    expiresAt;
        mapping(address => uint32[]) playerSteps;
    }

    struct Location {
        uint8       cell;
        Coordinate  coordinate;
    }

/*
    struct Step {
        Location from;
        Location to;
    }
*/

    struct RoundTreasury {
        uint128 prize;
        uint128 entranceFee;
        //mapping(address => uint128) playerJackpot;
    }

    struct BoardTreasury {
        uint128 rakes;
        uint128 jackpot;
        mapping(uint64 => RoundTreasury) roundTreasury;
    }

    struct CallMetadata {
        uint64  callId;
        address returnGasTo;
    }
}
